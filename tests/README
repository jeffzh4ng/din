# Tests

din's basic point-wise integration tests:
1. arithmetic
2. control flow
3. functions
4. data flow


https://rust-fuzz.github.io/book/
https://doc.rust-lang.org/nightly/clippy/installation.html
https://bheisler.github.io/criterion.rs/book/criterion_rs.html

**Contents**

1. Integration Tests
2. Fuzz Tests
3. Differential Test? TODO: or does differential just go under fuzz?
4. Benches

## 0. Requirements: Spike
**MacOS**
https://github.com/riscv-software-src/homebrew-riscv
> brew tap riscv-software-src/riscv
> brew install riscv-tools
>

**Linux**

## 1. Integration Tests
https://www.cs.cornell.edu/~asampson/blog/turnt.html
https://www.tedinski.com/2019/03/19/testing-at-the-boundaries.html

din's testing philosophy:
- light on unit tests. only there for bootstrapping happy path.
  - these are snapshotted
  - and will be used as doctests to, for examples.
- heavy on integration tests with trycmd
  - ted kaminski (kani) https://www.tedinski.com/2019/03/19/testing-at-the-boundaries.html

`cargo` offers pre-build scripts with `build.rs` at the package's root[0]. The
main usecase is for compiling non-Rust code like C for FFI. RFC 1777 was created
to add post-build scripts, but members of the core team are adverse to it given
the slippery slope to a general purpose build system[1]

[0]: see https://doc.rust-lang.org/cargo/reference/build-scripts.html
[1]: see https://github.com/rust-lang/rfcs/pull/1777#issuecomment-299275779

## 2. Differential Tests

## 3. Fuzz Tests
- fuzzing: machines
- pbt: humans

### E. Correctness

### Parsing Correctness
**Snapshot Testing**
https://www.cs.cornell.edu/~asampson/blog/turnt.html

**Fuzzing**
regehr
- https://users.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf
- https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf
- https://www.khoury.northeastern.edu/home/amal/papers/next700ccc.pdf
- https://www.williamjbowman.com/blog/2023/06/15/what-is-a-model/
- https://www.williamjbowman.com/blog/2023/06/07/what-is-syntax/
- https://www.williamjbowman.com/blog/2023/03/24/what-is-logical-relations/
- https://www.williamjbowman.com/blog/2017/03/24/what-even-is-compiler-correctness/
- https://www.google.com/search?q=csmith+compiler+reddit&sca_esv=114fca881d0d3d09&sxsrf=ACQVn09leOSX0UC5Fwz_rrCpOjAwR3sPZA%3A1712357977633&ei=WYIQZoqlJp7E0PEPof-ugA4&ved=0ahUKEwjKtfDHlqyFAxUeIjQIHaG_C-AQ4dUDCBA&uact=5&oq=csmith+compiler+reddit&gs_lp=Egxnd3Mtd2l6LXNlcnAiFmNzbWl0aCBjb21waWxlciByZWRkaXQyCBAhGKABGMMEMggQIRigARjDBEiVFlDTBVjaFHAEeACQAQGYAY4BoAGJCqoBBDEyLjO4AQPIAQD4AQGYAgugAuMFwgIIEAAYgAQYogTCAgoQIRgKGKABGMMEmAMAiAYBkgcDOS4yoAeVMQ&sclient=gws-wiz-serp#ip=1
- https://www.google.com/search?q=yarpgen+reddit&oq=yarpgen+reddit&gs_lcrp=EgZjaHJvbWUyCwgAEEUYChg5GKABMgkIARAhGAoYoAEyCQgCECEYChigATIJCAMQIRgKGKAB0gEIMTIwNWoxajeoAgCwAgA&sourceid=chrome&ie=UTF-8
- https://blog.sigplan.org/2021/01/14/finding-bugs-in-c-and-c-compilers-using-yarpgen/


- https://blog.regehr.org/archives/26
- https://blog.regehr.org/archives/28
- https://blog.regehr.org/archives/39
- https://blog.regehr.org/archives/47
- https://blog.regehr.org/archives/213
- https://blog.regehr.org/archives/226
- https://blog.regehr.org/archives/232
- https://blog.regehr.org/archives/238
- https://blog.regehr.org/archives/247
- https://blog.regehr.org/archives/249
- https://blog.regehr.org/archives/259
- https://blog.regehr.org/archives/295
- https://blog.regehr.org/archives/337
- https://blog.regehr.org/archives/340
- https://blog.regehr.org/archives/370
- https://blog.regehr.org/archives/380
- https://blog.regehr.org/archives/381
- https://blog.regehr.org/archives/382
- https://blog.regehr.org/archives/478
- https://blog.regehr.org/archives/388
- https://blog.regehr.org/archives/482
- https://blog.regehr.org/archives/492
- https://blog.regehr.org/archives/501
- https://blog.regehr.org/archives/510
- https://blog.regehr.org/archives/523
- https://blog.regehr.org/archives/563
- https://blog.regehr.org/archives/572
- https://blog.regehr.org/archives/591
- https://blog.regehr.org/archives/595
- https://blog.regehr.org/archives/639
- https://blog.regehr.org/archives/681
- https://blog.regehr.org/archives/689
- https://blog.regehr.org/archives/710
- https://blog.regehr.org/archives/713
- https://blog.regehr.org/archives/660
- https://blog.regehr.org/archives/748
- https://blog.regehr.org/archives/761
- https://blog.regehr.org/archives/782
- https://blog.regehr.org/archives/804
- https://blog.regehr.org/archives/820
- https://blog.regehr.org/archives/742
- https://blog.regehr.org/archives/856
- https://blog.regehr.org/archives/880
- https://blog.regehr.org/archives/896
- https://blog.regehr.org/archives/917
- https://blog.regehr.org/archives/955
- https://blog.regehr.org/archives/1036
- https://blog.regehr.org/archives/1039
- https://blog.regehr.org/archives/1047
- https://blog.regehr.org/archives/1052
- https://blog.regehr.org/archives/1061
- https://blog.regehr.org/archives/1161
- https://blog.regehr.org/archives/1180
- https://blog.regehr.org/archives/1238
- https://blog.regehr.org/archives/1246
- https://blog.regehr.org/archives/1278
- https://blog.regehr.org/archives/1284
- https://blog.regehr.org/archives/1287
- https://blog.regehr.org/archives/1419
- https://blog.regehr.org/archives/1428
- https://blog.regehr.org/archives/1436
- https://blog.regehr.org/archives/1438
- https://blog.regehr.org/archives/1467
- https://blog.regehr.org/archives/1476
- https://blog.regehr.org/archives/1496
- https://blog.regehr.org/archives/1520
- https://blog.regehr.org/archives/1565
- https://blog.regehr.org/archives/1605
- https://blog.regehr.org/archives/1678
- https://blog.regehr.org/archives/1679
- https://blog.regehr.org/archives/1687
- https://blog.regehr.org/archives/1700
- https://blog.regehr.org/archives/1796
- https://www.cs.cornell.edu/~asampson/blog/reduction.html
https://www.youtube.com/watch?v=WEwEPAF53n4&list=PL_R5A0lGi1ADOH1rT8c5ysZaU14O41vxO&index=4
https://www.flux.utah.edu/profile/jxyang

**Verification**
- **ECOOP 2003**: *The verifying compiler: A grand challenge for computing research (Hoare)*
  - Paper: [here](https://link.springer.com/chapter/10.1007/978-3-540-45213-3_4)
- **FM 2006**: *Formal Verification of a C Compiler Front-end (Blazy, Daygaye, Leroy)*
  - Paper: [here](https://xavierleroy.org/bibrefs/Leroy-compcert-06.html)
- **POPL 2006**: *Formal certification of a compiler back-end, or: programming a compiler with a proof assistant*
  - Paper: [here](https://xavierleroy.org/bibrefs/Leroy-compcert-06.html)
  - Cornell CS 6120 Discussion: [here](https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/comp-cert/)
- **PLDI 2011**: *Finding and Understanding Bugs in C Compilers (Yang, Chen, Eide, Regehr)*
  - Paper: [here](https://users.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf)
  - Cornell CS 6120 Discussion: [here](https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/bug-finding/)
- **ICFP 2019**: *The Next 700 Compiler Correctness Theorems (Patterson, Ahmed)*
  - Paper: [here](https://www.khoury.northeastern.edu/home/amal/papers/next700ccc.pdf)
  - Cornell PLDG Discussion: [here](https://priyasrikumar.com/next700ccc.pdf)

References
- OPLSS: https://www.cs.uoregon.edu/research/summerschool/archives.html
- Cornell CS 6120 Blog
  - 2019: [here](https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/)
  - 2020: [here](https://www.cs.cornell.edu/courses/cs6120/2020fa/blog/)
  - 2022: [here](https://www.cs.cornell.edu/courses/cs6120/2022sp/blog/)
  - 2023: [here](https://www.cs.cornell.edu/courses/cs6120/2023fa/blog/)
- Cornell PLDG Archive: [here](https://pl.cs.cornell.edu/pldg/)

Compcert
-  it only accepts C89 (now C11), targets generic x64 and optimizes at the level of GCC's
O1, would you take it?
  - don't see  news for catching up on optimization levels
# Tests

https://rust-fuzz.github.io/book/
https://doc.rust-lang.org/nightly/clippy/installation.html
https://bheisler.github.io/criterion.rs/book/criterion_rs.html

**Contents**

1. Integration Tests
2. Fuzz Tests
3. Differential Test? TODO: or does differential just go under fuzz?
4. Benches

## 0. Requirements: Spike
**MacOS**
https://github.com/riscv-software-src/homebrew-riscv
> brew tap riscv-software-src/riscv
> brew install riscv-tools
>

**Linux**

## 1. Integration Tests
https://www.cs.cornell.edu/~asampson/blog/turnt.html
https://www.tedinski.com/2019/03/19/testing-at-the-boundaries.html

din's testing philosophy:
- light on unit tests. only there for bootstrapping happy path.
  - these are snapshotted
  - and will be used as doctests to, for examples.
- heavy on integration tests with trycmd
  - ted kaminski (kani) https://www.tedinski.com/2019/03/19/testing-at-the-boundaries.html

`cargo` offers pre-build scripts with `build.rs` at the package's root[0]. The
main usecase is for compiling non-Rust code like C for FFI. RFC 1777 was created
to add post-build scripts, but members of the core team are adverse to it given
the slippery slope to a general purpose build system[1]

[0]: see https://doc.rust-lang.org/cargo/reference/build-scripts.html
[1]: see https://github.com/rust-lang/rfcs/pull/1777#issuecomment-299275779

## 2. Differential Tests

## 3. Fuzz Tests
- fuzzing: machines
- pbt: humans

### E. Correctness

### Parsing Correctness
**Snapshot Testing**
https://www.cs.cornell.edu/~asampson/blog/turnt.html

**Fuzzing**
regehr
- https://users.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf
- https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf
- https://www.khoury.northeastern.edu/home/amal/papers/next700ccc.pdf
- https://www.williamjbowman.com/blog/2023/06/15/what-is-a-model/
- https://www.williamjbowman.com/blog/2023/06/07/what-is-syntax/
- https://www.williamjbowman.com/blog/2023/03/24/what-is-logical-relations/
- https://www.williamjbowman.com/blog/2017/03/24/what-even-is-compiler-correctness/
- https://www.google.com/search?q=csmith+compiler+reddit&sca_esv=114fca881d0d3d09&sxsrf=ACQVn09leOSX0UC5Fwz_rrCpOjAwR3sPZA%3A1712357977633&ei=WYIQZoqlJp7E0PEPof-ugA4&ved=0ahUKEwjKtfDHlqyFAxUeIjQIHaG_C-AQ4dUDCBA&uact=5&oq=csmith+compiler+reddit&gs_lp=Egxnd3Mtd2l6LXNlcnAiFmNzbWl0aCBjb21waWxlciByZWRkaXQyCBAhGKABGMMEMggQIRigARjDBEiVFlDTBVjaFHAEeACQAQGYAY4BoAGJCqoBBDEyLjO4AQPIAQD4AQGYAgugAuMFwgIIEAAYgAQYogTCAgoQIRgKGKABGMMEmAMAiAYBkgcDOS4yoAeVMQ&sclient=gws-wiz-serp#ip=1
- https://www.google.com/search?q=yarpgen+reddit&oq=yarpgen+reddit&gs_lcrp=EgZjaHJvbWUyCwgAEEUYChg5GKABMgkIARAhGAoYoAEyCQgCECEYChigATIJCAMQIRgKGKAB0gEIMTIwNWoxajeoAgCwAgA&sourceid=chrome&ie=UTF-8
- https://blog.sigplan.org/2021/01/14/finding-bugs-in-c-and-c-compilers-using-yarpgen/


- https://blog.regehr.org/archives/26
- https://blog.regehr.org/archives/28
- https://blog.regehr.org/archives/39
- https://blog.regehr.org/archives/47
- https://blog.regehr.org/archives/213
- https://blog.regehr.org/archives/226
- https://blog.regehr.org/archives/232
- https://blog.regehr.org/archives/238
- https://blog.regehr.org/archives/247
- https://blog.regehr.org/archives/249
- https://blog.regehr.org/archives/259
- https://blog.regehr.org/archives/295
- https://blog.regehr.org/archives/337
- https://blog.regehr.org/archives/340
- https://blog.regehr.org/archives/370
- https://blog.regehr.org/archives/380
- https://blog.regehr.org/archives/381
- https://blog.regehr.org/archives/382
- https://blog.regehr.org/archives/478
- https://blog.regehr.org/archives/388
- https://blog.regehr.org/archives/482
- https://blog.regehr.org/archives/492
- https://blog.regehr.org/archives/501
- https://blog.regehr.org/archives/510
- https://blog.regehr.org/archives/523
- https://blog.regehr.org/archives/563
- https://blog.regehr.org/archives/572
- https://blog.regehr.org/archives/591
- https://blog.regehr.org/archives/595
- https://blog.regehr.org/archives/639
- https://blog.regehr.org/archives/681
- https://blog.regehr.org/archives/689
- https://blog.regehr.org/archives/710
- https://blog.regehr.org/archives/713
- https://blog.regehr.org/archives/660
- https://blog.regehr.org/archives/748
- https://blog.regehr.org/archives/761
- https://blog.regehr.org/archives/782
- https://blog.regehr.org/archives/804
- https://blog.regehr.org/archives/820
- https://blog.regehr.org/archives/742
- https://blog.regehr.org/archives/856
- https://blog.regehr.org/archives/880
- https://blog.regehr.org/archives/896
- https://blog.regehr.org/archives/917
- https://blog.regehr.org/archives/955
- https://blog.regehr.org/archives/1036
- https://blog.regehr.org/archives/1039
- https://blog.regehr.org/archives/1047
- https://blog.regehr.org/archives/1052
- https://blog.regehr.org/archives/1061
- https://blog.regehr.org/archives/1161
- https://blog.regehr.org/archives/1180
- https://blog.regehr.org/archives/1238
- https://blog.regehr.org/archives/1246
- https://blog.regehr.org/archives/1278
- https://blog.regehr.org/archives/1284
- https://blog.regehr.org/archives/1287
- https://blog.regehr.org/archives/1419
- https://blog.regehr.org/archives/1428
- https://blog.regehr.org/archives/1436
- https://blog.regehr.org/archives/1438
- https://blog.regehr.org/archives/1467
- https://blog.regehr.org/archives/1476
- https://blog.regehr.org/archives/1496
- https://blog.regehr.org/archives/1520
- https://blog.regehr.org/archives/1565
- https://blog.regehr.org/archives/1605
- https://blog.regehr.org/archives/1678
- https://blog.regehr.org/archives/1679
- https://blog.regehr.org/archives/1687
- https://blog.regehr.org/archives/1700
- https://blog.regehr.org/archives/1796
- https://www.cs.cornell.edu/~asampson/blog/reduction.html
https://www.youtube.com/watch?v=WEwEPAF53n4&list=PL_R5A0lGi1ADOH1rT8c5ysZaU14O41vxO&index=4
https://www.flux.utah.edu/profile/jxyang

**Verification**
- **ECOOP 2003**: *The verifying compiler: A grand challenge for computing research (Hoare)*
  - Paper: [here](https://link.springer.com/chapter/10.1007/978-3-540-45213-3_4)
- **FM 2006**: *Formal Verification of a C Compiler Front-end (Blazy, Daygaye, Leroy)*
  - Paper: [here](https://xavierleroy.org/bibrefs/Leroy-compcert-06.html)
- **POPL 2006**: *Formal certification of a compiler back-end, or: programming a compiler with a proof assistant*
  - Paper: [here](https://xavierleroy.org/bibrefs/Leroy-compcert-06.html)
  - Cornell CS 6120 Discussion: [here](https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/comp-cert/)
- **PLDI 2011**: *Finding and Understanding Bugs in C Compilers (Yang, Chen, Eide, Regehr)*
  - Paper: [here](https://users.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf)
  - Cornell CS 6120 Discussion: [here](https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/bug-finding/)
- **ICFP 2019**: *The Next 700 Compiler Correctness Theorems (Patterson, Ahmed)*
  - Paper: [here](https://www.khoury.northeastern.edu/home/amal/papers/next700ccc.pdf)
  - Cornell PLDG Discussion: [here](https://priyasrikumar.com/next700ccc.pdf)

References
- OPLSS: https://www.cs.uoregon.edu/research/summerschool/archives.html
- Cornell CS 6120 Blog
  - 2019: [here](https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/)
  - 2020: [here](https://www.cs.cornell.edu/courses/cs6120/2020fa/blog/)
  - 2022: [here](https://www.cs.cornell.edu/courses/cs6120/2022sp/blog/)
  - 2023: [here](https://www.cs.cornell.edu/courses/cs6120/2023fa/blog/)
- Cornell PLDG Archive: [here](https://pl.cs.cornell.edu/pldg/)

Compcert
-  it only accepts C89 (now C11), targets generic x64 and optimizes at the level of GCC's
O1, would you take it?
  - don't see  news for catching up on optimization levels
