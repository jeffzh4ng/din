# ARCHITECTURE
For readers coming in without a Rust background, here's a brief ontology of the
toolchain.

*Crates* are the atomic compilation of `rustc`. They correspond to one platform
object file. Crates can either be library crates or binary crates. This
bifurcation is inherited[0] from the usage of object files.

*Packages* are a collection of crates that `cargo` knows how to manage (dependency
resolution) and build (drives `rustc`). Packages can have multiple binary crates,
but at most one library crate. This is why package and crate are used colloquially
used as synonyms. The community's package registry is crates.io, although `cargo`
also supports decentralized git-based models. And yes, crates.io, ontologically
speaking, would have better been named to cargo.io[1] or packages.io.

The `cargo` tool borrows Rails' convention over configuration, which shows in a
package's file system layout. With the following layout, `cargo`'s build commands
work seamlessly: `cargo bench` runs the `benches/` crate, and `cargo test` runs
the `examples/` and `tests` crates.

- `src/`
     - `src/lib.rs`: default library crate
     - `src/main.rs`: default binary crate
- `examples/`: examples
- `tests/`: tests
- `benches/`: benchmarks
- `Cargo.toml`: manifest
- `Cargo.lock`: lockfile

[0]: Hoare's decision. He points out that a lot of "binaries" on your machine act
     more like "libaries" since they're not completely done linking, waiting to
     be dynamically linked. Asking `file` what `/bin/sh` is results in an ELF
     ELF shared object type ET_DYN rather than an executable ET_EXEC ("executable")
[1]: Klabnick says they actually wanted cargo.io, but it was taken by a startup
     at the time